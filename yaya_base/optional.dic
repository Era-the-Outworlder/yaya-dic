//*****************************************************************************
/* ############# Machine-aided Translations by Era ############# */
//SHIORI/3.0制御スクリプト for YAYA
//オプション関数

//SHIORI/3.0 control script for YAYA
//optional function
//******************************************************************************

#define	ESCAPE_TAG_1	CHR(0x3,0x3)
#define	ESCAPE_TAG_2	CHR(0x4,0x4)

//******************************************************************************
//初期化・後始末 -- Initialization and cleanup
//******************************************************************************

OnSystemLoad.SHIORI3FW.OPTIONAL
{
}

OnSystemUnload.SHIORI3FW.OPTIONAL
{
	ERASEVAR('SHIORI3FW.FMOCache')
	ERASEVAR('SHIORI3FW.SakuraNameList')
	ERASEVAR('SHIORI3FW.FMOTable')
}

//******************************************************************************
//さくらスクリプトタグ除去 -- Sakura Script Tag Removal
//******************************************************************************

//------------------------------------------------------------------------------
//　関数名：SHIORI3FW.EscapeDangerousTags
//　機能　：危険なタグのみをエスケープ（\付加）する。
//　引数　：argv0＝テキスト

//　Function Name : SHIORI3FW.EscapeDangerousTags
//　Function : Escapes only dangerous tags.
//　Argument : argv0＝Text
//------------------------------------------------------------------------------
SHIORI3FW.EscapeDangerousTags{
	_txt=_argv[0]
	_txt=REPLACE(_txt,'\\',ESCAPE_TAG_1)
	_txt=REPLACE(_txt,'\%',ESCAPE_TAG_2)
	_txt=RE_REPLACE(_txt, /
		'\\(?=(!\[(' + /
		'updatebymyself|vanishbymyself|enter,passivemode|' + /
		'leave,passivemode|lock,repaint|unlock,repaint|biff|' + /
		'open,browser|open,mailer|raise)' + /
		'.*?\]|\\j\[))' , /
		'\\')
	_txt=REPLACE(_txt,ESCAPE_TAG_2,'\%')
	_txt=REPLACE(_txt,ESCAPE_TAG_1,'\\')
	_txt
}

//------------------------------------------------------------------------------
//　関数名：SHIORI3FW.EscapeAllTags
//　機能　：全てのさくらスクリプトタグをエスケープ（\付加）する。
//　引数　：argv0＝テキスト

//　Function Name : SHIORI3FW.EscapeAllTags
//　Function : Escape all Sakura script tags.
//　Argument : argv0＝Text
//------------------------------------------------------------------------------
SHIORI3FW.EscapeAllTags{
	_txt=_argv[0]
	_txt=REPLACE(_txt,'\\',ESCAPE_TAG_1)
	_txt=REPLACE(_txt,'\%',ESCAPE_TAG_2)
	_txt=REPLACE(_txt,'\','\\')
	_txt=REPLACE(_txt,'%','\%')
	_txt=REPLACE(_txt,ESCAPE_TAG_2,'\%')
	_txt=REPLACE(_txt,ESCAPE_TAG_1,'\\')
	_txt
}

//------------------------------------------------------------------------------
//　関数名：SHIORI3FW.TranslateSystemChar
//　機能　：演算子などシステム予約文字を別のものに置き換える
//　引数　：argv0＝テキスト　argv1＝置き換え対象（省略時_）

//　Function Name : SHIORI3FW.TranslateSystemChar
//　Function : Replace operators and other system reserved characters with other ones.
//　Argument : argv0= Text　argv1= Replacement (Default_)
//------------------------------------------------------------------------------
SHIORI3FW.TranslateSystemChar
{
	_c = '_'
	if _argc >= 2 {
		_c = _argv[1]
	}
	_text = TOSTR(_argv[0])
	_text = RE_REPLACE(_text,"[ !%(CHR(0x22))%(CHR(0x25))#$&()*+,\-/:;<=>?@\[\]`{|}~]",_c)
	_text
}

//------------------------------------------------------------------------------
//　関数名：SHIORI3FW.InitBalloons
//　機能　：バルーン完全初期化スクリプトを自動生成する

//　Function Name : SHIORI3FW.InitBalloons
//　Function : Automatically generate a balloon initialization script
//------------------------------------------------------------------------------
SHIORI3FW.InitBalloons
{
	_tx = ''
	_n = ARRAYSIZE(SHIORI3FW.HWnd)
	for _i = 0 ; _i < _n ; _i++ {
		if SHIORI3FW.HWnd[_i] != 0 {
			_tx += "\p[%(_i)]\c\b[-1]"
		}
	}
	_tx
}

//******************************************************************************
// FMO関連 -- FMO-related
//******************************************************************************
//------------------------------------------------------------------------------
//関数名：SHIORI3FW.IsGhostExist(ゴースト名（sakuraname）[,fmoname])
//機能　：指定されたゴーストが存在するか調べる
//　　　　存在しなければ0、存在すれば1を返す

//Function Name : SHIORI3FW.IsGhostExist(ghostname（sakuraname）[,fmoname])
//Function : Find out if the specified ghost exists
//　　　　If it doesn't exist, return 0, if it does, 1.
//------------------------------------------------------------------------------
SHIORI3FW.IsGhostExist
{
	_ghostname=_argv[0]
	SHIORI3FW.RefreshFMOTable(_argv[1])
	_result=ASEARCH(_ghostname,SHIORI3FW.SakuraNameList)
	if _result == -1 {
		0
	}else{
		1
	}
}


//------------------------------------------------------------------------------
//関数名：SHIORI3FW.RefreshFMOTable(FMO名称,無視するエントリのHWND)
//機能　：READFMOによってFMOテーブルを作る。
/*
FMOはキャッシュされ、変わっていなければ解析は行われない。
FMO名称を省略すると自動的に'Sakura'になる。
無視するエントリのHWNDを省略すると、SHIORI3FW.HWnd[0] 変数が利用される。
（つまり自動的に自身の情報は含まれなくなる）

グローバル変数：SHIORI3FW.FMOCache		FMOの内容のキャッシュ（単純ダンプ）
グローバル変数：SHIORI3FW.FMOTable		FMOのテーブル（簡易配列。内容は以下）
id|name|keroname|hwnd|kerohwnd|path|ghostpath,
id|name|keroname|hwnd|kerohwnd|path|ghostpath,
...

グローバル変数：SHIORI3FW.SakuraNameList	sakuranameを列挙した汎用配列
また、いわゆる「非ゴースト」FMOエントリ（一時起動等）はこの時点で排除される。
*/

//Function Name : SHIORI3FW.RefreshFMOTable(FMO名称,無視するエントリのHWND)
//Function Name : SHIORI3FW.RefreshFMOTable(FMOname,HWND of entries to ignore)

//Function : Create an FMO table by READFMO.
/*
The FMO is cached and if it has not changed, no analysis is performed.
If the FMO name is omitted, the name is automatically changed to "Sakura".
If the HWND of the entry to ignore is omitted, the SHIORI3FW.HWnd[0] variable is used.
(i.e., it will not automatically contain any information about itself)

Global variable ：SHIORI3FW.FMOCache		FMO Content Cache (Simple Dump)
Global variable ：SHIORI3FW.FMOTable		FMO table (simple array. Contents are below)
id|name|keroname|hwnd|kerohwnd|path|ghostpath,
id|name|keroname|hwnd|kerohwnd|path|ghostpath,
...

Global variable ：SHIORI3FW.SakuraNameList	General purpose array enumerating sakuraname
Also, so-called "non-ghost" FMO entries (e.g., temporary startup) are eliminated at this point.
*/
//------------------------------------------------------------------------------
SHIORI3FW.RefreshFMOTable : void
{
	_fmoname=TOSTR(_argv[0])
	if _fmoname == '' {
		_fmoname='Sakura'
	}

	_result=''
	if _fmoname == 'SakuraUnicode'
		_result=READFMO(_fmoname,'UTF-8')
	else
		_result=READFMO(_fmoname)

	if SHIORI3FW.FMOCache == _result {
		//変わっていなければ即座に戻る
		//If it has not changed, return immediately
		return
	}

	//FMOの内容をキャッシュする
	//Cache the contents of FMO
	SHIORI3FW.FMOCache=_result
	SHIORI3FW.FMOTable=''
	SHIORI3FW.SakuraNameList=IARRAY

	_ignorehwnd=TOSTR(_argv[1])
	if _ignorehwnd == '' {
		_ignorehwnd = SHIORI3FW.HWnd[0]
	}

	//\r\nで分割
	//\r\n Split
	_array = SPLIT(_result,C_CRLF)
	_arraynum=ARRAYSIZE(_array)

	//変数初期化
	//Variable initialization
	_fmotable_temp=''
	_id=''
	_oldid=''
	_name=''
	_keroname=''
	_hwnd=''
	_kerohwnd=''
	_path=''
	_ghostpath=''

	//結果を擬似２次配列にストア
	//Store the result in pseudo secondary array
	//ssp_fmo_header_000024dc_005c094e.hwnd,6031694
	//<------------------id----------> key  value
	for _i=0 ; _i<_arraynum-1 ; _i++ {
		//一時起動ゴーストかどうか？
		//Is it a temporary starting ghost?
		_buf=_array[_i]
		_id=_buf[0,'.']
		if 'SSTPVIEWER-' _in_ _id  || 'ssp_fmo_header_dummyentry' _in_ _id || 'SSSB' _in_ _id{
			//一時起動なのでなにもしない
			//Do nothing because it is a temporary start
		}else{
			if _oldid == '' {
				_oldid = _id
			}
			//IDが変わったら一時保存を書き出し
			//Export temporary save when ID changes
			if _oldid != _id {
				_fmotable_temp+="%(_oldid)|%(_name)|%(_keroname)|%(_hwnd)|%(_kerohwnd)|%(_path)|%(_ghostpath),"
				_oldid = _id
				_name=''
				_keroname=''
				_hwnd=''
				_kerohwnd=''
				_path=''
				_ghostpath=''
			}
			_kvpair=_buf[1,'.']
			_key=_kvpair[0,C_BYTE1]
			_val=_kvpair[1,C_BYTE1]

			//各値を一時保存
			//Save each value temporarily
			case _key {
				when 'hwnd'		{_hwnd=_val}
				when 'name'		{_name=_val}
				when 'keroname'	{_keroname=_val}
				when 'path'		{_path=_val}
				when 'kerohwnd'	{_kerohwnd=_val}
				when 'ghostpath'{_ghostpath=_val}
			}
		}
	}
	//最後のエントリを書き出し
	//Write out the last entry
	_fmotable_temp += "%(_id)|%(_name)|%(_keroname)|%(_hwnd)|%(_kerohwnd)|%(_path)|%(_ghostpath)"

	//無視するHWNDを取り除き、同時にSakuraNameListを作成
	//Remove HWNDs to ignore and create SakuraNameList at the same time
	_count_temp=ARRAYSIZE(_fmotable_temp)
	for _i=0;_i<_count_temp;_i++ {
		_tablestr=_fmotable_temp[_i]
		_tablehwnd=_tablestr[3,'|']
		if _tablehwnd != _ignorehwnd {
			SHIORI3FW.FMOTable += _tablestr+','
			SHIORI3FW.SakuraNameList=(SHIORI3FW.SakuraNameList,_tablestr[1,'|'])
		}
	}

	//最後がカンマなら取り除く
	//If it ends with a comma, remove it.
	if SUBSTR(SHIORI3FW.FMOTable,STRLEN(SHIORI3FW.FMOTable)-1,1)==',' {
		SHIORI3FW.FMOTable=SUBSTR(SHIORI3FW.FMOTable,0,STRLEN(SHIORI3FW.FMOTable)-1)
	}
}

//******************************************************************************
// テキスト処理 -- Text processing
//******************************************************************************

//------------------------------------------------------------------------------
//　関数名：SHIORI3FW.MakeJustText
//　機能　：指定した長さになるまでスペースを埋める / 省略する
//　引数　：argv0＝テキスト　argv1＝文字数（半角換算）

//　Function Name : SHIORI3FW.MakeJustText
//　Function : Fill / omit spaces until the specified length is reached
//　Argument : argv0＝Text　argv1＝Number of characters (converted to half-width characters)
//------------------------------------------------------------------------------

//---- 後ろにスペースを補完する関数 (from和音)
//---- Function to complete trailing spaces (from chords)
SHIORI3FW.MakeLongText
{
	_menuitem = _argv[0]
	_len = _argv[1] - GETSTRBYTES(_menuitem,127)

	if _len <= 0 {
		_menuitem
		return
	}

	_space = '                                                                                    '
	_menuitem += SUBSTR(_space,0,_len)

	_menuitem
}

//---- 適当な長さで切る -- Cut at an appropriate length ----
SHIORI3FW.MakeShortText
{
	if _argc < 2 {
		'';
		return;
	}
	
	_src = _argv[0]
	_cut = TOINT(_argv[1])
	_text = ''
	
	if GETSTRBYTES(_argv[0],127) <= _cut {
		_argv[0]
		return;
	}
	
	_num = STRLEN(_src)
	_lendiff = 0 //後で保存するためにスコープを一つ下げるためのダミー代入 //Dummy assignment to lower the scope by one for later storage
	
	while 1 {
		_text = SUBSTR(_argv[0],0,_num)
		
		_lendiff = _cut - GETSTRBYTES(_text,127) - 2
		if _lendiff >= 0 {
			break;
		}
		_num -= 1
		if _num <= 0 {
			''
			return
		}
	}
	
	if _lendiff > 0 {
		_text += '...'
	}
	else {
		_text += '..'
	}
	_text
}

//---- 長さをきっちり調節
//---- Adjust the length exactly
SHIORI3FW.MakeJustText
{
	_text = SHIORI3FW.MakeLongText(_argv[0],_argv[1])
	if _text != _argv[0] { //短すぎた -- Too short
		_text
		return
	}
	
	_text = SHIORI3FW.MakeShortText(_argv[0],_argv[1])
	_text
}

//******************************************************************************
// その他 -- Other
//******************************************************************************

//Originally: HTTPコード->日本語 _argv[0]にコード

// Modified to produce messages in English and respond to additional codes --Era

SHIORI3FW.HTTPCodeToMessage
{
	case _argv[0] {
		when '400'
		{
			'Bad Request'
		}
		when '401'
		{
			'Unauthorized-- Authentication Required'
		}
		when '403' {
			'Forbidden-- Access Denied'
		}
		when '404' {
			'Not Found'
		}
		when '405'
		{
			'Method Not Allowed'
		}
		when '410'
		{
			'Gone- Resource no longer available'
		}
		when '450'
		{
			'Blocked by Windows Parental Controls (Microsoft)'
		}
		when '500' {
			'Internal Server Error'
		}
		when '502'
		{
			'Bad Gateway'
		}
		when '503'
		{
			'Unavailable'
		}
		when '504'
		{
			'Gateway Timeout'
		}
		when '599'
		{
			'Network Connect Timeout Error'
		}
		when 'timeout' {
			'Attempt timed-out'
		}
		when 'fileio' {
			'File write error'
		}
		when 'artificial' {
			'Manual interruption'
		}
	}
}

